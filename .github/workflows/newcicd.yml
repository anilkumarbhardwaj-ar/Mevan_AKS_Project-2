name: Java CI with Maven
on:
  push:
    branches:
      - main
jobs:
  compile:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin
          cache: maven
      - name: Install Maven
        run: |
          sudo apt update
          sudo apt install maven -y
      - name: Build with Maven
        run: mvn compile
  security-check:
    runs-on: self-hosted
    needs: compile
    steps:
      - uses: actions/checkout@v4
      - name: Trivy Install
        run: >
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y

          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -

          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list

          sudo apt-get update -y

          sudo apt-get install trivy -y
      - name: Trivy FS Scan
        run: trivy fs --format table -o fs-report.json .
      - name: Gitleaks install
        run: sudo apt install gitleaks -y
      - name: Gitleaks Code Scan
        run: gitleaks detect source . -r gitleaks-report.json -f json
  
  test:
    runs-on: self-hosted
    needs: security-check
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: temurin
          cache: maven
      - name: Unit Test Case
        run: mvn test

  sonarqube-scan-and-quality-gate:
    runs-on: self-hosted
    needs: test
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: "17"
        distribution: temurin
        cache: maven
    - name: Build Project
      run: mvn package
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.2.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}   

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }} #OPTIONAL

  docker-build-and-push:
    runs-on: self-hosted
    needs: sonarqube-scan-and-quality-gate
    steps:
    - uses: actions/checkout@v4
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: app
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: devopsbanks/repo18:latest   # dockerhub repo name is devopsbanks/bankapp
        file: ./Dockerfile

  deploy_to_aks:
    runs-on: self-hosted
    needs: docker-build-and-push
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash   
    - name: Install kubectl
      run: >
        curl -LO "https://dl.k8s.io/release/$(curl -L -s
        https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

        chmod +x kubectl

        sudo mv kubectl /usr/local/bin/
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Set AKS context
      run: >
        az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
                               --name ${{ secrets.AKS_CLUSTER_NAME }} \
                               --overwrite-existing

    - name: Create image pull secret
      run: |
        kubectl delete secret dockerhub-secret --ignore-not-found
        kubectl create secret docker-registry dockerhub-secret \
          --docker-username=${{ vars.DOCKERHUB_USERNAME }} \
          --docker-password=${{ secrets.DOCKERHUB_TOKEN }} \
          --docker-email=desiboys85@gmail.com
     
    - name: Deploy to AKS
      run: kubectl apply -f ds.yml      

  


     
